- name: copy openstack repo rpm
  copy:
    src: rdo-release-pike-1.noarch.rpm
    dest: /root/rdo-release-pike-1.noarch.rpm
  when: "ansible_distribution == 'Fedora'"

- name: install openstack repo from rpm
  package:
    name: /root/rdo-release-pike-1.noarch.rpm
    state: present
  when: "ansible_distribution == 'Fedora'"

- name: install software-properties-common
  package:
    name: software-properties-common
    state: present
  when: "ansible_distribution == 'Ubuntu'"

- name: install openstack packages
  package:
    name:
      - openstack-keystone
      - httpd
      - mod_wsgi
      - python-openstackclient
    state: present
  when: "ansible_distribution == 'Fedora'"

- name: install openstack packages
  package:
    name:
      - keystone
      - apache2
      - libapache2-mod-wsgi
      - python-openstackclient
    state: present
  when: "ansible_distribution == 'Ubuntu'"

- name: Install the mysqlclient module
  pip:
    name: mysqlclient
    executable: pip3

- name: create user for keystone
  mysql_user:
    name: keystone
    password: "{{ mariadb_keystone_password }}"
    priv: '*.*:ALL'
    state: present

- name: create user for keystone
  mysql_user:
    login_user: root
    login_password: ''
    name: keystone
    host_all: yes
    state: present
    host: "{{ remote_host_ip }}"

- name: create keystone database
  mysql_db:
    name: keystone
    state: present

- name: fix db characher set
  shell: mysql -e "ALTER SCHEMA keystone DEFAULT CHARACTER SET utf8 ;"

- name: add controller name to hosts file
  shell: echo "127.0.0.1   controller" >> /etc/hosts

- name: add keystone.conf from template
  template:
    src: keystone.j2
    dest: /etc/keystone/keystone.conf
    owner: root
    group: keystone
    mode: 0640
  when: "ansible_distribution == 'Fedora'"

- name: add keystone.conf from template
  template:
    src: keystone_queens.j2
    dest: /etc/keystone/keystone.conf
    owner: root
    group: keystone
    mode: 0640
  when: "ansible_distribution == 'Ubuntu'"

- name: copy httpd.conf
  copy:
    src: httpd.conf
    dest: /etc/httpd/conf//httpd.conf
  when: "ansible_distribution == 'Fedora'"

- name: copy apache2.conf
  copy:
    src: apache2.conf
    dest: /etc/apache2/apache2.conf
  when: "ansible_distribution == 'Ubuntu'"

- name: create link for wsgi conf
  shell: "ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/"
  when: "ansible_distribution == 'Fedora'"

- name: enable httpd service
  systemd:
    name: httpd
    enabled: yes
    masked: no
    state: restarted
  when: "ansible_distribution == 'Fedora'"

- name: enable apache2 service
  systemd:
    name: apache2
    enabled: yes
    masked: no
    state: restarted
  when: "ansible_distribution == 'Ubuntu'"

- name: add .bashrc from template
  template:
    src: .bashrc.j2
    dest: /root/.bashrc
    owner: root
    group: keystone
    mode: 0644

- name: reload .bashrc
  shell: . /root/.bashrc

- name: create .config/openstack dir
  file:
    path: /root/.config/openstack/
    state: directory
    owner: root
    group: keystone
    mode: 0755

- name: add clouds.yml from template
  template:
    src: clouds.j2
    dest: /root/.config/openstack/clouds.yaml
    owner: root
    group: keystone
    mode: 0644

- name: add keystone_init.sh from template
  template:
    src: keystone_init_pike.j2
    dest: /root/keystone_init.sh
    owner: root
    group: keystone
    mode: 0640
  when: "ansible_distribution == 'Fedora'"

- name: add keystone_init.sh from template
  template:
    src: keystone_init_queens.j2
    dest: /root/keystone_init.sh
    owner: root
    group: keystone
    mode: 0640
  when: "ansible_distribution == 'Ubuntu'"

- name: make keystone_init.sh executable
  file:
    dest: /root/keystone_init.sh
    mode: a+x

- name: init keystone
  shell: /root/keystone_init.sh

- name: Install the shade module
  pip:
    name: shade
    executable: pip3

- name: create swifty domain
  os_keystone_domain:
     cloud: swifty
     state: present
     name: swifty

- name: create swifty.admin role
  os_keystone_role:
    cloud: swifty
    state: present
    name: swifty.admin

- name: create swifty.owner role
  os_keystone_role:
    cloud: swifty
    state: present
    name: swifty.owner

- name: create swifty.ui role
  os_keystone_role:
    cloud: swifty
    state: present
    name: swifty.ui

- name: create swifty.monitor role
  os_keystone_role:
    cloud: swifty
    state: present
    name: swifty.monitor

- name: create swyadmin project
  os_project:
    cloud: swifty
    state: present
    name: swyadmin
    domain_id: swifty
    enabled: True

- name: create swyui project
  os_project:
    cloud: swifty
    state: present
    name: swyui
    domain_id: swifty
    enabled: True

- name: create swyadmin user
  os_user:
    cloud: swifty
    state: present
    name: swyadmin
    password: "{{ keystone_swyadmin_password }}"
    domain: swifty
    default_project: swyadmin

- name: create swyui user
  os_user:
    cloud: swifty
    state: present
    name: swyui
    password: "{{ keystone_swyui_password }}"
    domain: swifty
    default_project: swyui

- name: create swydbscr user
  os_user:
    cloud: swifty
    state: present
    name: swydbscr
    password: "{{ keystone_swydbscr_password }}"
    domain: swifty
    default_project: swyadmin

- name: grant swifty.admin role to swyadmin user
  os_user_role:
    cloud: swifty
    user: swyadmin
    role: swifty.admin
    project: swyadmin

- name: grant swifty.owner role to swyadmin user
  os_user_role:
    cloud: swifty
    user: swyadmin
    role: swifty.owner
    project: swyadmin

- name: grant swifty.ui role to swyui user
  os_user_role:
    cloud: swifty
    user: swyui
    role: swifty.ui
    project: swyui

- name: grant swifty.monitor role to swydbscr user
  os_user_role:
    cloud: swifty
    user: swydbscr
    role: swifty.monitor
    project: swyadmin

- name: add wsgi conf
  copy:
    src: keystone-wsgi.conf
    dest: /etc/apache2/sites-available/keystone.conf
  when: "ansible_distribution == 'Ubuntu'"

- name: restart apache2 service
  systemd:
    name: apache2
    state: restarted
  when: "ansible_distribution == 'Ubuntu'"

- name:
  shell: openstack user set --project admin admin --os-cloud swifty

- name: cron job for flush tokens
  cron:
    name: keystone token_flush
    weekday: 0
    minute: 0
    hour: 0
    user: root
    job: "keystone-manage token_flush"
    cron_file: keystone_token_flush
